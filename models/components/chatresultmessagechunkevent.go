// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type Event string

const (
	EventMessageChunk Event = "message_chunk"
)

func (e Event) ToPointer() *Event {
	return &e
}

func (e *Event) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "message_chunk":
		*e = Event(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Event: %v", v)
	}
}

// ChatResultMessageChunkEvent - A server-sent event containing a chunk of the message.
type ChatResultMessageChunkEvent struct {
	Event Event        `json:"event"`
	Data  MessageChunk `json:"data"`
}

func (o *ChatResultMessageChunkEvent) GetEvent() Event {
	if o == nil {
		return Event("")
	}
	return o.Event
}

func (o *ChatResultMessageChunkEvent) GetData() MessageChunk {
	if o == nil {
		return MessageChunk{}
	}
	return o.Data
}
