// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type AssistantMessageRole string

const (
	AssistantMessageRoleAssistant AssistantMessageRole = "assistant"
)

func (e AssistantMessageRole) ToPointer() *AssistantMessageRole {
	return &e
}

func (e *AssistantMessageRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "assistant":
		*e = AssistantMessageRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AssistantMessageRole: %v", v)
	}
}

type AssistantMessage struct {
	Role         AssistantMessageRole `json:"role"`
	Content      string               `json:"content"`
	RecordsCited *RecordsCited        `json:"records_cited,omitempty"`
}

func (o *AssistantMessage) GetRole() AssistantMessageRole {
	if o == nil {
		return AssistantMessageRole("")
	}
	return o.Role
}

func (o *AssistantMessage) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *AssistantMessage) GetRecordsCited() *RecordsCited {
	if o == nil {
		return nil
	}
	return o.RecordsCited
}
