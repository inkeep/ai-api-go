// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/inkeep/ai-api-go/internal/utils"
)

type RecordTypeEnumerated string

const (
	RecordTypeEnumeratedDocumentation         RecordTypeEnumerated = "documentation"
	RecordTypeEnumeratedSite                  RecordTypeEnumerated = "site"
	RecordTypeEnumeratedDiscoursePost         RecordTypeEnumerated = "discourse_post"
	RecordTypeEnumeratedGithubIssue           RecordTypeEnumerated = "github_issue"
	RecordTypeEnumeratedGithubDiscussion      RecordTypeEnumerated = "github_discussion"
	RecordTypeEnumeratedStackoverflowQuestion RecordTypeEnumerated = "stackoverflow_question"
	RecordTypeEnumeratedDiscordForumPost      RecordTypeEnumerated = "discord_forum_post"
	RecordTypeEnumeratedDiscordMessage        RecordTypeEnumerated = "discord_message"
	RecordTypeEnumeratedCustomQuestionAnswer  RecordTypeEnumerated = "custom_question_answer"
)

func (e RecordTypeEnumerated) ToPointer() *RecordTypeEnumerated {
	return &e
}

func (e *RecordTypeEnumerated) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "documentation":
		fallthrough
	case "site":
		fallthrough
	case "discourse_post":
		fallthrough
	case "github_issue":
		fallthrough
	case "github_discussion":
		fallthrough
	case "stackoverflow_question":
		fallthrough
	case "discord_forum_post":
		fallthrough
	case "discord_message":
		fallthrough
	case "custom_question_answer":
		*e = RecordTypeEnumerated(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecordTypeEnumerated: %v", v)
	}
}

type RecordTypeType string

const (
	RecordTypeTypeRecordTypeEnumerated RecordTypeType = "RecordTypeEnumerated"
	RecordTypeTypeStr                  RecordTypeType = "str"
)

// RecordType - The type of record
type RecordType struct {
	RecordTypeEnumerated *RecordTypeEnumerated
	Str                  *string

	Type RecordTypeType
}

func CreateRecordTypeRecordTypeEnumerated(recordTypeEnumerated RecordTypeEnumerated) RecordType {
	typ := RecordTypeTypeRecordTypeEnumerated

	return RecordType{
		RecordTypeEnumerated: &recordTypeEnumerated,
		Type:                 typ,
	}
}

func CreateRecordTypeStr(str string) RecordType {
	typ := RecordTypeTypeStr

	return RecordType{
		Str:  &str,
		Type: typ,
	}
}

func (u *RecordType) UnmarshalJSON(data []byte) error {

	recordTypeEnumerated := RecordTypeEnumerated("")
	if err := utils.UnmarshalJSON(data, &recordTypeEnumerated, "", true, true); err == nil {
		u.RecordTypeEnumerated = &recordTypeEnumerated
		u.Type = RecordTypeTypeRecordTypeEnumerated
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = RecordTypeTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RecordType) MarshalJSON() ([]byte, error) {
	if u.RecordTypeEnumerated != nil {
		return utils.MarshalJSON(u.RecordTypeEnumerated, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
