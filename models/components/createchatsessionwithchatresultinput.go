// Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/inkeep/ai-api-go/internal/utils"
)

type ChatModeOptions string

const (
	ChatModeOptionsTurbo ChatModeOptions = "turbo"
	ChatModeOptionsAuto  ChatModeOptions = "auto"
)

func (e ChatModeOptions) ToPointer() *ChatModeOptions {
	return &e
}
func (e *ChatModeOptions) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "turbo":
		fallthrough
	case "auto":
		*e = ChatModeOptions(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChatModeOptions: %v", v)
	}
}

type ChatModeType string

const (
	ChatModeTypeChatModeOptions ChatModeType = "ChatModeOptions"
	ChatModeTypeStr             ChatModeType = "str"
)

type ChatMode struct {
	ChatModeOptions *ChatModeOptions
	Str             *string

	Type ChatModeType
}

func CreateChatModeChatModeOptions(chatModeOptions ChatModeOptions) ChatMode {
	typ := ChatModeTypeChatModeOptions

	return ChatMode{
		ChatModeOptions: &chatModeOptions,
		Type:            typ,
	}
}

func CreateChatModeStr(str string) ChatMode {
	typ := ChatModeTypeStr

	return ChatMode{
		Str:  &str,
		Type: typ,
	}
}

func (u *ChatMode) UnmarshalJSON(data []byte) error {

	var chatModeOptions ChatModeOptions = ChatModeOptions("")
	if err := utils.UnmarshalJSON(data, &chatModeOptions, "", true, true); err == nil {
		u.ChatModeOptions = &chatModeOptions
		u.Type = ChatModeTypeChatModeOptions
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ChatModeTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ChatMode", string(data))
}

func (u ChatMode) MarshalJSON() ([]byte, error) {
	if u.ChatModeOptions != nil {
		return utils.MarshalJSON(u.ChatModeOptions, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type ChatMode: all fields are null")
}

type CreateChatSessionWithChatResultInput struct {
	IntegrationID string           `json:"integration_id"`
	ChatSession   ChatSessionInput `json:"chat_session"`
	ChatMode      *ChatMode        `json:"chat_mode,omitempty"`
	Stream        *bool            `default:"false" json:"stream"`
}

func (c CreateChatSessionWithChatResultInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateChatSessionWithChatResultInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateChatSessionWithChatResultInput) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *CreateChatSessionWithChatResultInput) GetChatSession() ChatSessionInput {
	if o == nil {
		return ChatSessionInput{}
	}
	return o.ChatSession
}

func (o *CreateChatSessionWithChatResultInput) GetChatMode() *ChatMode {
	if o == nil {
		return nil
	}
	return o.ChatMode
}

func (o *CreateChatSessionWithChatResultInput) GetStream() *bool {
	if o == nil {
		return nil
	}
	return o.Stream
}
