// Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/inkeep/ai-api-go/internal/utils"
)

type ChatResultStreamType string

const (
	ChatResultStreamTypeMessageChunk ChatResultStreamType = "message_chunk"
	ChatResultStreamTypeRecordsCited ChatResultStreamType = "records_cited"
)

type ChatResultStream struct {
	ChatResultMessageChunkEvent *ChatResultMessageChunkEvent
	ChatResultRecordsCitedEvent *ChatResultRecordsCitedEvent

	Type ChatResultStreamType
}

func CreateChatResultStreamMessageChunk(messageChunk ChatResultMessageChunkEvent) ChatResultStream {
	typ := ChatResultStreamTypeMessageChunk

	return ChatResultStream{
		ChatResultMessageChunkEvent: &messageChunk,
		Type:                        typ,
	}
}

func CreateChatResultStreamRecordsCited(recordsCited ChatResultRecordsCitedEvent) ChatResultStream {
	typ := ChatResultStreamTypeRecordsCited

	return ChatResultStream{
		ChatResultRecordsCitedEvent: &recordsCited,
		Type:                        typ,
	}
}

func (u *ChatResultStream) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Event string `json:"event"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Event {
	case "message_chunk":
		chatResultMessageChunkEvent := new(ChatResultMessageChunkEvent)
		if err := utils.UnmarshalJSON(data, &chatResultMessageChunkEvent, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Event == message_chunk) type ChatResultMessageChunkEvent within ChatResultStream: %w", string(data), err)
		}

		u.ChatResultMessageChunkEvent = chatResultMessageChunkEvent
		u.Type = ChatResultStreamTypeMessageChunk
		return nil
	case "records_cited":
		chatResultRecordsCitedEvent := new(ChatResultRecordsCitedEvent)
		if err := utils.UnmarshalJSON(data, &chatResultRecordsCitedEvent, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Event == records_cited) type ChatResultRecordsCitedEvent within ChatResultStream: %w", string(data), err)
		}

		u.ChatResultRecordsCitedEvent = chatResultRecordsCitedEvent
		u.Type = ChatResultStreamTypeRecordsCited
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ChatResultStream", string(data))
}

func (u ChatResultStream) MarshalJSON() ([]byte, error) {
	if u.ChatResultMessageChunkEvent != nil {
		return utils.MarshalJSON(u.ChatResultMessageChunkEvent, "", true)
	}

	if u.ChatResultRecordsCitedEvent != nil {
		return utils.MarshalJSON(u.ChatResultRecordsCitedEvent, "", true)
	}

	return nil, errors.New("could not marshal union type ChatResultStream: all fields are null")
}

func (o ChatResultStream) GetEventEncoding(event string) (string, error) {
	switch event {
	case "message_chunk":
		return "application/json", nil
	case "records_cited":
		return "application/json", nil
	}
	return "", errors.New("could not find encoding for event: " + event)
}
