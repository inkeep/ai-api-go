// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type ChatResultRecordsCitedEventEvent string

const (
	ChatResultRecordsCitedEventEventRecordsCited ChatResultRecordsCitedEventEvent = "records_cited"
)

func (e ChatResultRecordsCitedEventEvent) ToPointer() *ChatResultRecordsCitedEventEvent {
	return &e
}

func (e *ChatResultRecordsCitedEventEvent) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "records_cited":
		*e = ChatResultRecordsCitedEventEvent(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChatResultRecordsCitedEventEvent: %v", v)
	}
}

// ChatResultRecordsCitedEvent - A server-sent event with information about the records cited in the message.
type ChatResultRecordsCitedEvent struct {
	Event ChatResultRecordsCitedEventEvent `json:"event"`
	Data  RecordsCited                     `json:"data"`
}

func (o *ChatResultRecordsCitedEvent) GetEvent() ChatResultRecordsCitedEventEvent {
	if o == nil {
		return ChatResultRecordsCitedEventEvent("")
	}
	return o.Event
}

func (o *ChatResultRecordsCitedEvent) GetData() RecordsCited {
	if o == nil {
		return RecordsCited{}
	}
	return o.Data
}
